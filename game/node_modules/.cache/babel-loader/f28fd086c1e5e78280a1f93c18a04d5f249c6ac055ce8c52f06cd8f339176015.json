{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sra1e\\\\Downloads\\\\Satya\\\\Something\\\\game\\\\src\\\\Instructions\\\\Instructions.js\";\nimport React, { Component } from 'react';\nimport { Card } from 'react-bootstrap';\nimport history from '../history';\nimport './Instructions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Instructions extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fade-class\",\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        padding: 30,\n        animationName: 'fade-in'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            color: 'yellow'\n          },\n          children: \"INSTRUCTIONS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            width: '70rem',\n            backgroundColor: 'lightblue',\n            padding: 10\n          },\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text\",\n            children: \"Always agree upon the basic rules before playing a game. Games are fun. Arguments are not. Here are widely accepted basic dice game rules for all games that will help you learn how to play dice quickly: 1. The results of a roll must land flat on the table or playing surface. 2. If they fall off a table or lean against an object, they are said to be \\u201Ccocked\\u201D. They must be rolled again. 3. \\u201CStacked\\u201D means one die landed on top of another after being rolled. They must be rolled again. 4.. Each player \\u201Cflops\\u201D, or rolls, one die to determine who goes first. The highest number wins. 5. Players can change these rules as long as other players are in agreement. TIP: The last rule is worth re-reading. Rule variations can add to the fun, but everyone must agree to them first. Rules for individual games may alter these common rules too.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center',\n            marginTop: '15px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"int-btn pulse\",\n            onClick: () => history.push('/Options'),\n            children: [\" \", '>', '>', \"NEXT\", '>', '>', \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Instructions;","map":{"version":3,"names":["React","Component","Card","history","jsxDEV","_jsxDEV","Instructions","render","className","style","display","justifyContent","padding","animationName","children","color","fileName","_jsxFileName","lineNumber","columnNumber","width","backgroundColor","textAlign","marginTop","onClick","push"],"sources":["C:/Users/sra1e/Downloads/Satya/Something/game/src/Instructions/Instructions.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Card} from 'react-bootstrap';\nimport history from '../history';\nimport './Instructions.css'\n\n\nclass Instructions extends Component {\n    render() {\n        return (\n            <div className='fade-class' style={{ display: 'flex', justifyContent: 'center', padding: 30, animationName: 'fade-in'}}>\n                <div><h2 style={{color:'yellow'}}>INSTRUCTIONS</h2>\n                    <Card style={{ width: '70rem', backgroundColor:'lightblue', padding:10}}>\n                        <h4 className='text'>\n                            Always agree upon the basic rules before playing a game. Games are fun. Arguments are not.\n                            Here are widely accepted basic dice game rules for all games that will help you learn how to play dice quickly:\n\n                            1. The results of a roll must land flat on the table or playing surface.\n                            2. If they fall off a table or lean against an object, they are said to be “cocked”. They must be rolled again.\n                            3. “Stacked” means one die landed on top of another after being rolled.\n                            They must be rolled again.\n                            4.. Each player “flops”, or rolls, one die to determine who goes first. The highest number wins.\n                            5. Players can change these rules as long as other players are in agreement.\n\n                            TIP: The last rule is worth re-reading. Rule variations can add to the fun, but everyone must agree to them first.\n\n                            Rules for individual games may alter these common rules too.\n                        </h4>\n                    </Card>\n                    <div style={{ textAlign: 'center', marginTop: '15px' }}>\n                      <button className='int-btn pulse'onClick={() => history.push('/Options')}> {'>'}{'>'}NEXT{'>'}{'>'} </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Instructions;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,IAAI,QAAO,iBAAiB;AACrC,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAO,oBAAoB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAG3B,MAAMC,YAAY,SAASL,SAAS,CAAC;EACjCM,MAAMA,CAAA,EAAG;IACL,oBACIF,OAAA;MAAKG,SAAS,EAAC,YAAY;MAACC,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,cAAc,EAAE,QAAQ;QAAEC,OAAO,EAAE,EAAE;QAAEC,aAAa,EAAE;MAAS,CAAE;MAAAC,QAAA,eACnHT,OAAA;QAAAS,QAAA,gBAAKT,OAAA;UAAII,KAAK,EAAE;YAACM,KAAK,EAAC;UAAQ,CAAE;UAAAD,QAAA,EAAC;QAAY;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK,eAC/Cd,OAAA,CAACH,IAAI;UAACO,KAAK,EAAE;YAAEW,KAAK,EAAE,OAAO;YAAEC,eAAe,EAAC,WAAW;YAAET,OAAO,EAAC;UAAE,CAAE;UAAAE,QAAA,eACpET,OAAA;YAAIG,SAAS,EAAC,MAAM;YAAAM,QAAA,EAAC;UAcrB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAK;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACF,eACPd,OAAA;UAAKI,KAAK,EAAE;YAAEa,SAAS,EAAE,QAAQ;YAAEC,SAAS,EAAE;UAAO,CAAE;UAAAT,QAAA,eACrDT,OAAA;YAAQG,SAAS,EAAC,eAAe;YAAAgB,OAAO,EAAEA,CAAA,KAAMrB,OAAO,CAACsB,IAAI,CAAC,UAAU,CAAE;YAAAX,QAAA,GAAC,GAAC,EAAC,GAAG,EAAE,GAAG,EAAC,MAAI,EAAC,GAAG,EAAE,GAAG,EAAC,GAAC;UAAA;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAS;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACzG;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACJ;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACJ;EAEd;AACJ;AAEA,eAAeb,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}